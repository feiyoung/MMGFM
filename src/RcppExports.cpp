// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vb_mmgfmcpp
Rcpp::List vb_mmgfmcpp(const Rcpp::List& XList, const arma::vec& typeID, const arma::mat& numvarmat, const Rcpp::List& tauList, const Rcpp::List& Zlist, const Rcpp::List& betalist_int, const Rcpp::List& Alist_int, const Rcpp::List& Blist_int, const Rcpp::List& invLambdalist_int, const arma::cube& sigma2_int, const Rcpp::List& Mulist_y_int, const Rcpp::List& Slist_y_int, const Rcpp::List& Mlist_int, const arma::cube& Sigma_int, const Rcpp::List& Olist_int, const Rcpp::List& Philist_int, const arma::cube& zeta_int, const Rcpp::List& wlist_int, const double& epsELBO, const int& maxIter, const bool& verbose, const bool& A_fast, const bool& add_IC_iter);
RcppExport SEXP _MMGFM_vb_mmgfmcpp(SEXP XListSEXP, SEXP typeIDSEXP, SEXP numvarmatSEXP, SEXP tauListSEXP, SEXP ZlistSEXP, SEXP betalist_intSEXP, SEXP Alist_intSEXP, SEXP Blist_intSEXP, SEXP invLambdalist_intSEXP, SEXP sigma2_intSEXP, SEXP Mulist_y_intSEXP, SEXP Slist_y_intSEXP, SEXP Mlist_intSEXP, SEXP Sigma_intSEXP, SEXP Olist_intSEXP, SEXP Philist_intSEXP, SEXP zeta_intSEXP, SEXP wlist_intSEXP, SEXP epsELBOSEXP, SEXP maxIterSEXP, SEXP verboseSEXP, SEXP A_fastSEXP, SEXP add_IC_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type typeID(typeIDSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type numvarmat(numvarmatSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tauList(tauListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Zlist(ZlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type betalist_int(betalist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Alist_int(Alist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Blist_int(Blist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type invLambdalist_int(invLambdalist_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma2_int(sigma2_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Mulist_y_int(Mulist_y_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist_y_int(Slist_y_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Mlist_int(Mlist_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigma_int(Sigma_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Olist_int(Olist_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Philist_int(Philist_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type zeta_int(zeta_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type wlist_int(wlist_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsELBO(epsELBOSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type A_fast(A_fastSEXP);
    Rcpp::traits::input_parameter< const bool& >::type add_IC_iter(add_IC_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_mmgfmcpp(XList, typeID, numvarmat, tauList, Zlist, betalist_int, Alist_int, Blist_int, invLambdalist_int, sigma2_int, Mulist_y_int, Slist_y_int, Mlist_int, Sigma_int, Olist_int, Philist_int, zeta_int, wlist_int, epsELBO, maxIter, verbose, A_fast, add_IC_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MMGFM_vb_mmgfmcpp", (DL_FUNC) &_MMGFM_vb_mmgfmcpp, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_MMGFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
