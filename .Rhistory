ptmp <- pvec[ic]
for(id in 1:length(pveclist[[ic]]) ){
numvarmat[ic, id] <- pveclist[[ic]][id]
}
set.seed(1)
betaList[[ic]] <- matrix(rnorm(d*ptmp, sd=2), d, ptmp)
}
row.names(numvarmat) <- types
pcum <- c(0, cumsum(pvec))
A0List <- list()
B0List <- list()
Vlist <- list()
M <-  sum(numvarmat>0)
for(s in 1:S){
B0tmplist <- list()
V0 <- matrix(NA, nvec[s], M)
m <- 1
for(ic in 1:cc){
#
Amat_tmp <- NULL
Bmat_tmp <- NULL
for(id in 1:length(pveclist[[ic]])){
p_cd <- numvarmat[ic, id]
if(s == 1){
Z1 <- matrix(rnorm(p_cd * (q+qs[s])), p_cd, (q+qs[s]))
svdZ <- svd(Z1)
AB <-  svdZ$u %*% diag(sqrt(svdZ$d[1:(q+qs[s])])) * rho[ic]
AB <- AB %*% Diag(sign(AB[1,]))
Amat_tmp <- rbind(AB[,1:q], Amat_tmp)
Bmat_tmp <- rbind(AB[,(q+1):(q+qs[s])], Bmat_tmp)
# B0tmplist[[m]] <- AB[,(q+1):(q+qs[s])]
}else{
Z1 <- matrix(rnorm(p_cd * (qs[s])), p_cd, (qs[s]))
svdZ <- svd(Z1)
B <-  svdZ$u %*% diag(sqrt(svdZ$d[1:qs[s]])) * rho[ic]
B <- B %*% Diag(sign(B[1,]))
Bmat_tmp <- rbind(B, Bmat_tmp)
}
V0[,m] <- rnorm(nvec[s], sd=sqrt(sigmavec[ic]))
m <- m+1
}
if(s == 1){
A0List[[ic]] <- Amat_tmp
}
B0tmplist[[ic]] <- Bmat_tmp
}
Vlist[[s]] <- V0
B0List[[s]] <- B0tmplist
}
XList <- list()
F0List <- list()
H0List <- list()
ZList <- list()
tauList <- list()
for(s in 1:S){
Vtmplist <- list()
m <- 1
for(ic in 1:cc){
Vmat <- NULL
for(id in 1:length(pveclist[[ic]])){
p_cd <- numvarmat[ic, id]
Vmat <- cbind(Vmat, matrix(Vlist[[s]][,m], nvec[s], p_cd))
m <- m+1
}
Vtmplist[[ic]] <- Vmat
} ## Vmat in R^(ns * p_total)
set.seed(seed+s)
F0 <- matrix(rnorm(nvec[s]*q), nvec[s], q)
F0List[[s]] <- F0
set.seed(seed + s+100)
H0 <- matrix(rnorm(nvec[s]*qs[s]), nvec[s], qs[s])
H0List[[s]] <- H0
Z <- cbind(1, matrix(runif(nvec[s]*(d-1), -3, 3), nvec[s], d-1)*rho_z)
ZList[[s]] <- Z
Xtmplist <- list()
tautmpList <- list()
for(ic in 1:cc){
B_tmp <-  B0List[[s]][[ic]]
A_tmp <- A0List[[ic]]
beta_tmp <- betaList[[ic]]
p <- sum(pveclist[[ic]])
if(heter_error){
Lam0 <- sigma_eps*diag(runif(p, 0.5, 1.5))
}else{
Lam0 <- sigma_eps*diag(p)
}
if(types[ic]=='gaussian'){
Mu <- Z%*% beta_tmp + F0 %*% t(A_tmp) + H0 %*% t(B_tmp) +  Vtmplist[[ic]] +  mvrnorm(nvec[s],rep(0, p), Lam0)
Xtmplist[[ic]] <- Mu
}else if(types[ic]=='poisson'){
Mu <- Z%*% beta_tmp + F0 %*% t(A_tmp) + H0 %*% t(B_tmp) +  Vtmplist[[ic]] +  mvrnorm(nvec[s],rep(0, p), Lam0)
Xtmplist[[ic]]  <- matrix(rpois(nvec[s] * p, lambda = exp(Mu)), nvec[s], p)
}else if(types[ic]=='binomial'){
Mu <- Z%*% beta_tmp + F0 %*% t(A_tmp) + H0 %*% t(B_tmp) +  Vtmplist[[ic]] +  mvrnorm(nvec[s],rep(0, p), Lam0)
Xtmplist[[ic]]  <- matrix(rbinom(nvec[s] * p, size=n_bin,prob  = 1/(1+exp(-Mu))), nvec[s], p)
}
tautmpList[[ic]] <- matrix(0, nvec[s], length(pveclist[[ic]]))
}
XList[[s]] <- Xtmplist
tauList[[s]] <- tautmpList
}
return(list(XList = XList, ZList=ZList, tauList=tauList, A0List = A0List, B0List = B0List,
VList=Vlist, F0List=F0List, H0List = H0List,  betaList= betaList,
sigma_eps=sigma_eps,numvarmat= numvarmat, types=types, Lam0 = Lam0))
}
i <- 1
message("i = ", i)
datlist <- gendata_MM(seed = i,  nvec = c(300, 200, 100),
pveclist = list('poisson'=c(50, 150, 200)),
q = q,  d= 3,qs = qsvec,  rho = 2, rho_z=0.5,
sigmavec=0.5,  sigma_eps=sigma_eps, heter_error = TRUE)
str(datlist)
XList <- datlist$XList
max(unlist(XList))
str(XList)
ZList <- datlist$ZList
tauList <- datlist$tauList
numvarmat <- datlist$numvarmat
reslist <- MMGFM(XList, ZList=ZList, numvarmat, q=3, qsvec = qsvec, init='MSFRVI',add_IC_iter = FALSE, epsELBO = 1e-20) # LFM
metricList$F_tr[i,1] <- meanTr(reslist$hF, datlist$F0List)
metricList$H_tr[i,1] <-meanTr(reslist$hH, datlist$H0List)
metricList$V_tr[i,1] <-meanTr(lapply(reslist$hv, function(x) Reduce(cbind,x) ), datlist$VList)
metricList$A_tr[i,1] <-metric_mean(AList=reslist$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,1] <- mean(ms_metric_mean(reslist$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,1] <-normvec(Reduce(cbind, reslist$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,1] <-normvec(1/unlist(reslist$hinvLambda) - sigma_eps)
metricList$time[i,1] <- reslist$time.use
metric_mean(AList=reslist$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
### MultiCOAP
res_mcoap <- multicoap_run(XcList=XList, ZList,numvarmat, q, qsvec,epsELBO = 1e-20)
metricList$F_tr[i,5] <- meanTr(res_mcoap$hF, datlist$F0List)
metricList$H_tr[i,5] <-meanTr(res_mcoap$hH, datlist$H0List)
metricList$A_tr[i,5] <- metric_mean(AList=res_mcoap$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,5] <- mean(ms_metric_mean(res_mcoap$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,5] <- normvec(t(res_mcoap$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,5] <-normvec(unlist(res_mcoap$hLambda) - sigma_eps)
metricList$time[i,5] <- res_mcoap$time.use
metric_mean(AList=res_mcoap$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
mean(ms_metric_mean(res_mcoap$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
mean(ms_metric_mean(reslist$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
for(i in 1:N){
# i <- 1
message("i = ", i)
datlist <- gendata_MM(seed = i,  nvec = c(300, 200, 100),
pveclist = list('poisson'=c(50, 150, 200)),
q = q,  d= 3,qs = qsvec,  rho = 2, rho_z=0.5,
sigmavec=0.5,  sigma_eps=sigma_eps, heter_error = TRUE)
str(datlist)
XList <- datlist$XList
max(unlist(XList))
str(XList)
ZList <- datlist$ZList
tauList <- datlist$tauList
numvarmat <- datlist$numvarmat
reslist <- MMGFM(XList, ZList=ZList, numvarmat, q=3, qsvec = qsvec, init='MSFRVI',add_IC_iter = FALSE, epsELBO = 1e-20) # LFM
metricList$F_tr[i,1] <- meanTr(reslist$hF, datlist$F0List)
metricList$H_tr[i,1] <-meanTr(reslist$hH, datlist$H0List)
metricList$V_tr[i,1] <-meanTr(lapply(reslist$hv, function(x) Reduce(cbind,x) ), datlist$VList)
metricList$A_tr[i,1] <-metric_mean(AList=reslist$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,1] <- mean(ms_metric_mean(reslist$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,1] <-normvec(Reduce(cbind, reslist$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,1] <-normvec(1/unlist(reslist$hinvLambda) - sigma_eps)
metricList$time[i,1] <- reslist$time.use
# ##GFM
# res_gfm <- gfm_run(XList, numvarmat, q=q, dc_eps  = 1e-20)
# metricList$F_tr[i,2] <- meanTr(res_gfm$hF, datlist$F0List)
# metricList$A_tr[i,2] <-metric_mean(AList=res_gfm$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$time[i,2] <- res_gfm$time.use
#
# ### MRRR
# res_mrrr <- mrrr_run(XList, ZList, numvarmat, q, truncflag=TRUE, trunc=500)
# metricList$F_tr[i,3] <- meanTr(res_mrrr$hF, datlist$F0List)
# metricList$A_tr[i,3] <- metric_mean(AList=res_mrrr$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$beta_norm[i,3] <-normvec(res_mrrr$hbeta - Reduce(cbind,datlist$betaList))
# metricList$time[i,3] <- res_mrrr$time.use
#
# ### MSFR
# res_msfr <- MSFR_run(XList, ZList, numvarmat, q, qs=qsvec, maxIter=10, log.transform=TRUE, dir.source=dir.source)
# metricList$F_tr[i,4] <- meanTr(res_msfr$hF, datlist$F0List)
# metricList$H_tr[i,4] <- meanTr(res_msfr$hH, datlist$H0List)
# metricList$A_tr[i,4] <- metric_mean(AList=res_msfr$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$B_tr[i,4] <- mean(ms_metric_mean(res_msfr$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
# metricList$beta_norm[i,4] <- normvec(t(res_msfr$hbeta)- Reduce(cbind,datlist$betaList))
# metricList$Lambda_norm[i,4] <-normvec(unlist(res_msfr$hLambda) - sigma_eps)
# metricList$time[i,4] <- res_msfr$time.use
### MultiCOAP
res_mcoap <- multicoap_run(XcList=XList, ZList,numvarmat, q, qsvec,epsELBO = 1e-20)
metricList$F_tr[i,5] <- meanTr(res_mcoap$hF, datlist$F0List)
metricList$H_tr[i,5] <-meanTr(res_mcoap$hH, datlist$H0List)
metricList$A_tr[i,5] <- metric_mean(AList=res_mcoap$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,5] <- mean(ms_metric_mean(res_mcoap$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,5] <- normvec(t(res_mcoap$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,5] <-normvec(unlist(res_mcoap$hLambda) - sigma_eps)
metricList$time[i,5] <- res_mcoap$time.use
}
sapply(metricList, colMeans, na.rm=TRUE)
sapply(metricList, colSD, na.rm=TRUE)
for(i in 1:N){
# i <- 1
message("i = ", i)
datlist <- gendata_MM(seed = i,  nvec = c(300, 200, 100),
pveclist = list('poisson'=c(50, 150, 200)),
q = q,  d= 3,qs = qsvec,  rho = 2, rho_z=0.5,
sigmavec=0,  sigma_eps=sigma_eps, heter_error = TRUE)
str(datlist)
XList <- datlist$XList
max(unlist(XList))
str(XList)
ZList <- datlist$ZList
tauList <- datlist$tauList
numvarmat <- datlist$numvarmat
reslist <- MMGFM(XList, ZList=ZList, numvarmat, q=3, qsvec = qsvec, init='MSFRVI',add_IC_iter = FALSE, epsELBO = 1e-20) # LFM
metricList$F_tr[i,1] <- meanTr(reslist$hF, datlist$F0List)
metricList$H_tr[i,1] <-meanTr(reslist$hH, datlist$H0List)
metricList$V_tr[i,1] <-meanTr(lapply(reslist$hv, function(x) Reduce(cbind,x) ), datlist$VList)
metricList$A_tr[i,1] <-metric_mean(AList=reslist$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,1] <- mean(ms_metric_mean(reslist$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,1] <-normvec(Reduce(cbind, reslist$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,1] <-normvec(1/unlist(reslist$hinvLambda) - sigma_eps)
metricList$time[i,1] <- reslist$time.use
# ##GFM
# res_gfm <- gfm_run(XList, numvarmat, q=q, dc_eps  = 1e-20)
# metricList$F_tr[i,2] <- meanTr(res_gfm$hF, datlist$F0List)
# metricList$A_tr[i,2] <-metric_mean(AList=res_gfm$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$time[i,2] <- res_gfm$time.use
#
# ### MRRR
# res_mrrr <- mrrr_run(XList, ZList, numvarmat, q, truncflag=TRUE, trunc=500)
# metricList$F_tr[i,3] <- meanTr(res_mrrr$hF, datlist$F0List)
# metricList$A_tr[i,3] <- metric_mean(AList=res_mrrr$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$beta_norm[i,3] <-normvec(res_mrrr$hbeta - Reduce(cbind,datlist$betaList))
# metricList$time[i,3] <- res_mrrr$time.use
#
# ### MSFR
# res_msfr <- MSFR_run(XList, ZList, numvarmat, q, qs=qsvec, maxIter=10, log.transform=TRUE, dir.source=dir.source)
# metricList$F_tr[i,4] <- meanTr(res_msfr$hF, datlist$F0List)
# metricList$H_tr[i,4] <- meanTr(res_msfr$hH, datlist$H0List)
# metricList$A_tr[i,4] <- metric_mean(AList=res_msfr$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
# metricList$B_tr[i,4] <- mean(ms_metric_mean(res_msfr$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
# metricList$beta_norm[i,4] <- normvec(t(res_msfr$hbeta)- Reduce(cbind,datlist$betaList))
# metricList$Lambda_norm[i,4] <-normvec(unlist(res_msfr$hLambda) - sigma_eps)
# metricList$time[i,4] <- res_msfr$time.use
### MultiCOAP
res_mcoap <- multicoap_run(XcList=XList, ZList,numvarmat, q, qsvec,epsELBO = 1e-20)
metricList$F_tr[i,5] <- meanTr(res_mcoap$hF, datlist$F0List)
metricList$H_tr[i,5] <-meanTr(res_mcoap$hH, datlist$H0List)
metricList$A_tr[i,5] <- metric_mean(AList=res_mcoap$hA, datlist$A0List, align='unaligned', numvarmat = numvarmat)
metricList$B_tr[i,5] <- mean(ms_metric_mean(res_mcoap$hB, datlist$B0List, align='unaligned', numvarmat = numvarmat))
metricList$beta_norm[i,5] <- normvec(t(res_mcoap$hbeta)- Reduce(cbind,datlist$betaList))
metricList$Lambda_norm[i,5] <-normvec(unlist(res_mcoap$hLambda) - sigma_eps)
metricList$time[i,5] <- res_mcoap$time.use
}
sapply(metricList, colMeans, na.rm=TRUE)
sapply(metricList, colSD, na.rm=TRUE)
reslist <- MMGFM(XList, ZList=ZList, numvarmat, q=3, qsvec = qsvec, init='MSFRVI',add_IC_iter = FALSE, epsELBO = 1e-20) # LFM
N <- 2
q <- 3
qsvec  <- rep(2,3)
sigma_eps <- 1
methodNames <- c("MMGFM", "GFM", "MRRR", "LFR", "MultiCOAP")
n_methods <- length(methodNames)
metricList <- list(F_tr = matrix(NA,N, n_methods),
H_tr = matrix(NA,N, n_methods),
V_tr = matrix(NA,N, n_methods),
A_tr = matrix(NA, N, n_methods),
B_tr = matrix(NA, N, n_methods),
beta_norm=matrix(NA, N, n_methods),
Lambda_norm=matrix(NA, N, n_methods),
time = matrix(NA, N, n_methods))
for(ii in seq_along(metricList)) colnames(metricList[[ii]]) <- methodNames
i <- 1
message("i = ", i)
datlist <- gendata_MM(seed = i,  nvec = c(300, 200, 100),
pveclist = list('gaussian'=c(100, 200),'poisson'=c(50, 150, 200)),
q = q,  d= 3,qs = qsvec,  rho = c(3, 2), rho_z=0.5,
sigmavec=c(0.5, 0.5),  sigma_eps=sigma_eps)
str(datlist)
XList <- datlist$XList
max(unlist(XList))
str(XList)
ZList <- datlist$ZList
tauList <- datlist$tauList
numvarmat <- datlist$numvarmat
reslist <- MMGFM(XList, ZList=ZList, numvarmat, q=3, qsvec = qsvec, init='MSFRVI',add_IC_iter = FALSE, epsELBO = 1e-20) # LFM
MMGFM
epsELBO=1e-8; maxIter=30; add_IC_iter=FALSE; verbose=TRUE; seed=1
init = 'MSFRVI'
Diag <- function(vec) {
q <- length(vec)
if (q > 1) {
y <- diag(vec)
}
else {
y <- matrix(vec, 1, 1)
}
return(y)
}
get_initials <- function(X, q) {
library(irlba)
n <- nrow(X)
p <- ncol(X)
mu <- colMeans(X)
X <- X - matrix(mu, nrow = n, ncol = p, byrow = TRUE)
svdX <- irlba(A = X, nv = q)
PCs <- sqrt(n) * svdX$u
loadings <- svdX$v %*% Diag(svdX$d[1:q])/sqrt(n)
dX <- PCs %*% t(loadings) - X
Lam_vec <- colSums(dX^2)/n
return(list(hH = PCs, hB = loadings, hmu = mu, sigma2vec = Lam_vec))
}
add_ident_beta <- function(ZList, betaList, vList, FList, AList, method='remove_fv'){
S <- length(ZList)
M <- length(vList[[1]])
V <- NULL
for(s in 1:S){
tmpMat <- NULL
for(m in 1:M){
tmpMat <- cbind(tmpMat, vList[[s]][[m]])
}
V <- rbind(V,tmpMat)
}
mu_V <- colMeans(V)
nvec <- sapply(ZList, nrow)
Zmat <- Reduce(rbind, ZList)
d <- ncol(Zmat)
Mu_v <- NULL
for(m in 1:M){
Mu_v <- c(Mu_v, rep(mu_V[m], ncol(betaList[[m]])))
}
shift_beta <- qr.solve(t(Zmat) %*% Zmat) %*% t(Zmat) %*% matrix(Mu_v, nrow(Zmat), length(Mu_v))
hbeta <- Reduce(cbind,betaList) + shift_beta
if(method=='remove_v'){
hbetaList <- mat2list(hbeta, sapply(betaList, ncol), by_row = FALSE)
}else if(method=='remove_fv'){
mu_f <- colMeans(Reduce(rbind, FList))
Amat <- t(Reduce(rbind,AList))
for(id in 1:d){
hbeta[id,] <- hbeta[id,] + Amat[id,] * mu_f[id]
}
hbetaList <-mat2list(hbeta, sapply(betaList, ncol), by_row = FALSE)
for(s in 1:S){
FList[[s]] <- FList[[s]] - matrix(mu_f, nrow=nvec[s], ncol=length(mu_f), byrow = TRUE)
}
}
names(hbetaList) <- names(betaList)
## re-organize v
V_center <- V - matrix(mu_V, nrow=nrow(V), ncol=ncol(V), byrow = TRUE)
hVList <- lapply(mat2list(V_center,  pvec=nvec), mat2list, pvec=rep(1, M), by_row=FALSE)
for(s in 1:S){
for(m in 1:M){
vList[[s]][[m]][,1] <- hVList[[s]][[m]]
}
}
return(list(hbeta=hbetaList, hV=vList, hF=FList))
}
S <- length(XList)
### Check input arguments
flag <- sapply(XList, function(x) inherits(x, "list"))
if(!all(flag)) stop("MMGFM: each component of XList must be a list consisting of each matrix for each modality type!")
flag <- sapply(XList[[1]], function(x) inherits(x, "matrix"))
if(!all(flag)) stop("MMGFM: each component of XList must be a list consisting of each matrix for each modality type!")
flag <- sapply(ZList, function(x) inherits(x, "matrix"))
if(!all(flag)) stop("MMGFM: each component of ZList must be a  matrix!")
if(length(ZList) !=S) stop("MMGFM: length of ZList must be equal to the length of XList!")
if(!inherits(numvarmat, "matrix") || is.null(row.names(numvarmat)))  stop("MMGFM: numvarmat must be a  matrix with row.names!")
if(length(qsvec) !=S)  stop("MMGFM: length of qsvec must be equal to the length of ZList and XList!")
if(q<2) stop("MMGFM: the number of study-shared factors must be greater than 1!")
flag <- sapply(qsvec, function(x) x<1 )
if(any(flag)) stop("MMGFM: the number of study-specified factors must be greater than 0!")
cc <- nrow(numvarmat)
dd <- ncol(numvarmat)
num_modals <- rowSums(numvarmat)
nvec <- sapply(XList, function(x) nrow(x[[1]]))
s_max <- which.max(nvec)
d <- ncol(ZList[[1]])
if(is.null(tauList)){
tauList <- list()
for(s in 1:S){
tmptaulist <- list()
for(ic in 1:cc){
tmptaulist[[ic]] <- matrix(0, nrow=nvec[s], ncol=sum(numvarmat[ic,]>0))
}
tauList[[s]] <- tmptaulist
}
}
if(!inherits(tauList[[1]], 'list')){
stop("MMGFM: each component of tauList must be a list consisting of each matrix for each modality type!")
}
mapID <- c("gaussian"=1, "poisson"=2, 'binomial'=3)
if(is.null(row.names(numvarmat))) stop("MMGFM: the row.names of numvarmat must be some of 'gaussian', 'poisson' and 'bionmial'! \n")
if(!all(row.names(numvarmat) %in% names(mapID))) stop("MMGFM: the row.names of numvarmat must be some of 'gaussian', 'poisson' and 'bionmial'! \n")
types <- row.names(numvarmat)
message("Data include ", S, " studies/sources")
message("variables belong to ", cc, " types: ", paste(types, collapse = ', '))
set.seed(seed)
betalist_int <- list()
Alist_int <- list()
Blist_int <- list()
invLambdalist_int <- list()
Mulist_y_int <- list()
Slist_y_int <- list()
Mlist_int <- list()
Olist_int <- list()
wlist_int <- list()
sigma2_int <- array(dim=c(dd, cc, S))
Sigma_int <- array(dim=c(q, q, S))
Phi_int <- list()
zeta_int <- array(dim=c(dd, cc, S))
typeID <- unname(mapID[types])
message("Initialization...")
## generate the common intials
for(s in 1:S){
# s <- 1
qs <-  qsvec[s]
ns <- nrow(XList[[s]][[1]])
Sigma_int[,, s] <- diag(rep(1, q))
Phi_int[[s]] <- diag(rep(1, qs)) ### Phi is require using field to put the different shape matrix
invLamlist_tmp <- list()
Sylist_tmp <- list()
wlist_tmp <- list()
Xlist_tmp <- list()
for(ic in 1:cc){
pt <- sum(numvarmat[ic, ]) ## the number of variables in type t.
invLamlist_tmp[[ic]] <- rep(1, pt)
if(types[ic] == 'gaussian'){
Sylist_tmp[[ic]] <- matrix(0, ns, pt)
}else{
Sylist_tmp[[ic]] <- matrix(1, ns, pt)
}
wlist_tmp[[ic]] <-  matrix(0, ns, dd)
if(typeID[ic] == 2){
Xlist_tmp[[ic]] <- log(1+XList[[s]][[ic]])
}else if(typeID[ic]==1){
Xlist_tmp[[ic]] <- XList[[s]][[ic]]
}else if(typeID[ic] ==3){
Xlist_tmp[[ic]] <- XList[[s]][[ic]] # log(1+XList[[s]][[ic]])
}
for(id in 1:dd){
if(numvarmat[ic,id]>0){
sigma2_int[id, ic, s] <- 1
zeta_int[id, ic, s] <- 1
}
}
}
Mulist_y_int[[s]] <- Xlist_tmp
Slist_y_int[[s]] <- Sylist_tmp
wlist_int[[s]] <- wlist_tmp
invLambdalist_int[[s]] <- invLamlist_tmp
}
message("Initialization using MSFR...")
res_msfr <- initialize_MSFR(XList, ZList, numvarmat,tauList=NULL, q, qs=qsvec, maxIter=15, verbose=FALSE)
str(XList)
library(MultiCOAP)
S <- length(XList)
nvec <- sapply(XList, function(x) nrow(x[[1]]))
pvec <- as.vector(t(numvarmat))
pvec <- pvec[pvec>0]
d <- ncol(ZList[[1]])
XnewList <- list()
cc <- nrow(numvarmat)
types <- row.names(numvarmat)
for(s in 1:S){
tmpmat <- NULL
for(ic in 1:cc){
tmpmat2 <- XList[[s]][[ic]]
if(types[ic]== 'poisson' && log.transform){
tmpmat2 <- log(XList[[s]][[ic]]+1)
}
tmpmat <- cbind(tmpmat, tmpmat2)
}
XnewList[[s]] <- tmpmat
}
log.transform=TRUE
for(s in 1:S){
tmpmat <- NULL
for(ic in 1:cc){
tmpmat2 <- XList[[s]][[ic]]
if(types[ic]== 'poisson' && log.transform){
tmpmat2 <- log(XList[[s]][[ic]]+1)
}
tmpmat <- cbind(tmpmat, tmpmat2)
}
XnewList[[s]] <- tmpmat
}
str(XnewList)
tauList <- lapply(nvec, function(n1) rep(1, n1))
res_msfrvi <- MSFRVI(XnewList, ZList, q = q, qs = qs, rank_use = d)
q
qs
rank_use
d
qs
qs=qsvec
res_msfrvi <- MSFRVI(XnewList, ZList, q = q, qs = qs, rank_use = d)
MSFRVI
install.packages("MultiCOAP")
library(MultiCOAP)
tolower("High-Dimensional Multi-Study Multi-Modality Covariate-Augmented Generalized Factor Model")
devtools::document()
example("MMGFM")
devtools::document()
library(MMGFM)
?MMGFM
example("MMGFM")
example("gendata_mmgfm")
example("selectFac.MMGFM")
devtools::document()
example("MMGFM")
library(MMGFM)
example("MMGFM")
example("selectFac.MMGFM")
example("gendata_mmgfm")
